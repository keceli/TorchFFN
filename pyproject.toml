[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "torchffn"
version = "0.1.0"
description = "A PyTorch implementation of Flood-Filling Networks for EM connectomics"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "TorchFFN Contributors", email = "torchffn@example.com"}
]
maintainers = [
    {name = "TorchFFN Contributors", email = "torchffn@example.com"}
]
keywords = ["pytorch", "segmentation", "connectomics", "em", "flood-fill", "3d-cnn"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Image Processing",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
]
requires-python = ">=3.10"
dependencies = [
    "torch>=2.3.0",
    "numpy>=1.21.0",
    "pyyaml>=6.0",
    "matplotlib>=3.5.0",
    "tensorboard>=2.10.0",
]

[project.optional-dependencies]
all = [
    "h5py>=3.7.0",
    "zarr>=2.12.0",
    "pillow>=9.0.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pre-commit>=3.0.0",
]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pre-commit>=3.0.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=5.0.0",
    "mypy>=1.0.0",
]
data = [
    "h5py>=3.7.0",
    "zarr>=2.12.0",
    "pillow>=9.0.0",
]

[project.urls]
Homepage = "https://github.com/your-org/torchffn"
Documentation = "https://torchffn.readthedocs.io"
Repository = "https://github.com/your-org/torchffn.git"
Issues = "https://github.com/your-org/torchffn/issues"

[project.scripts]
ffn-train = "torchffn.scripts.ffn_train:main"
ffn-infer = "torchffn.scripts.ffn_infer:main"
ffn-benchmark = "torchffn.scripts.ffn_benchmark:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["torchffn*"]

[tool.setuptools.package-data]
torchffn = ["configs/*.yaml"]

[tool.pytest.ini_options]
testpaths = ["torchffn/tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "gpu: marks tests that require GPU",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["torchffn"]
omit = [
    "torchffn/tests/*",
    "torchffn/scripts/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["torchffn"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "numpy.*",
    "matplotlib.*",
    "yaml.*",
    "h5py.*",
    "zarr.*",
    "PIL.*",
]
ignore_missing_imports = true